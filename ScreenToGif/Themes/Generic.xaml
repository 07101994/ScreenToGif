<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ScreenToGif.Controls"
                    xmlns:conv="clr-namespace:ScreenToGif.Util.Converters"
                    xmlns:prop="clr-namespace:ScreenToGif.Properties">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/ScreenToGif;component/Themes/RangeSlider.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--Converter-->
    <BooleanToVisibilityConverter x:Key="Bool2VisibilityConverterGeneric" />
    <conv:StringToInt x:Key="StringToInt"/>
    <conv:UriToBitmap x:Key="UriToBitmapConverter"/>
    <conv:IntToDelayString x:Key="IntToDelayStringConverter"/>
    <conv:DoubleToPercentage x:Key="DoubleToPercentageConverter"/>
    <conv:BytesToSize x:Key="BytesToSizeConverter"/>
    <conv:ColorToAlpha x:Key="ColorToAlphaConverter"/>
    <conv:IntToString x:Key="IntToStringConverter"/>
    <conv:MultiLineTitle x:Key="MultiLineTitleConverter"/>

    <!--  Window Button Style -->
    <Style TargetType="{x:Type Button}" x:Key="WindowButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Chrome"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" Effect="{DynamicResource ShadowEffect}">
                        <Viewbox MaxHeight="15" MaxWidth="15" Stretch="Uniform">
                            <ContentPresenter
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Margin" Value="0,0,5,0"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="Gray"/>-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Office RepeatButton Style -->
    <Style TargetType="{x:Type RepeatButton}" x:Key="OfficeRepeatButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Chrome"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FF777777" />
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="6"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
                <Setter Property="Foreground" Value="#FF444444" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window Style -->
    <Style TargetType="{x:Type local:LightWindow}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Background" Value="#FFE9E9E7"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Effect" Value="{DynamicResource Shadow.Black.Dark}"/>
        <!--<Setter Property="BorderBrush" Value="DeepSkyBlue"/>-->
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="MinWidth" Value="180"/>
        <Setter Property="Title" Value="Screen To Gif" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LightWindow}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                        <Grid ZIndex="0">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="1*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Grid Grid.Row="0" Grid.Column="0" Background="{TemplateBinding Background}" ZIndex="1" Margin="5,0,0,0">
                                    <local:ImageButton x:Name="BackButton" Style="{DynamicResource Style.Button.NoText}" MaxSize="25" Width="Auto">
                                        <ContentControl Content="{TemplateBinding Child}" Width="Auto" Height="Auto" />
                                        <local:ImageButton.ToolTip>
                                            <ToolTip Content="{DynamicResource Back}" Placement="Top" HorizontalOffset="-5" />
                                        </local:ImageButton.ToolTip>
                                    </local:ImageButton>
                                </Grid>

                                <Grid Grid.Row="0" Grid.Column="1" x:Name="MoveRectangle" Background="{TemplateBinding Background}" Height="30">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="1*"/>
                                    </Grid.ColumnDefinitions>

                                    <TextBlock Grid.Column="0" x:Name="CaptionText" Text="{TemplateBinding Title}" FontFamily="Segoe UI" FontSize="16" 
                                               FontWeight="Regular" Margin="5,5,0,0" Foreground="#FF6F5252" Effect="{DynamicResource Shadow.Foreground.Small}"/>

                                    <TextBlock Grid.Column="1" x:Name="FrameCountTextBlock" Text="{TemplateBinding FrameCount, Converter={StaticResource IntToStringConverter}}" FontFamily="Segoe UI" FontSize="16" 
                                               FontWeight="Regular" Margin="5,5,0,0" Foreground="#FF061E87" Effect="{DynamicResource Shadow.Foreground.Small}"/>
                                </Grid>

                                <!--<StackPanel Grid.Row="0" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,5,0" DataContext="{x:Type local:LightWindow}">
                                    <StackPanel.ToolTip>
                                        <ToolTip>Top and Left points.</ToolTip>
                                    </StackPanel.ToolTip>
                                    
                                    <Label Content="{TemplateBinding Top}" FontSize="10" Padding="0" Foreground="SlateBlue"/>
                                    <Label Content="{TemplateBinding Left}" FontSize="10" Padding="0" Foreground="SlateBlue"/>
                                </StackPanel>-->

                                <StackPanel Grid.Row="0" Grid.Column="2" Orientation="Horizontal" Background="{TemplateBinding Background}" Margin="0,0,5,0">
                                    <Button x:Name="MinimizeButton" Style="{StaticResource WindowButtonStyle}" Content="{DynamicResource Vector.Minimize}" Width="30" Margin="0"/>
                                    <Button x:Name="RestoreButton" Style="{StaticResource WindowButtonStyle}" Content="{DynamicResource Vector.Maximize}" Width="30" Margin="0"/>
                                    <Button x:Name="CloseButton" Style="{StaticResource WindowButtonStyle}" Content="{DynamicResource Vector.Close}" Width="30" Margin="0"/>
                                </StackPanel>

                                <!--Margin="5,5,5,0"-->
                                <Grid Grid.Row="1" Grid.ColumnSpan="3" Grid.Column="0" Margin="5,0" Background="{x:Null}">
                                    <AdornerDecorator>
                                        <ContentPresenter/>
                                    </AdornerDecorator>
                                </Grid>
                            </Grid>

                            <Grid x:Name="ResizeGrid" ZIndex="0">
                                <Rectangle x:Name="top"
                                           Stroke="{x:Null}" Fill="Transparent"
                                           VerticalAlignment="Top"
                                           Height="5" Margin="5,0" />

                                <Rectangle x:Name="bottom"
                                           Stroke="{x:Null}" Fill="Transparent"
                                           VerticalAlignment="Bottom"
                                           Height="5"
                                           Margin="5,0,5,0" />

                                <Rectangle x:Name="left"                                    
                                           Stroke="{x:Null}" Fill="{TemplateBinding Background}"
                                           HorizontalAlignment="Left"
                                           Margin="0,5,0,5"
                                           Width="5"/>

                                <Rectangle x:Name="right"
                                           Stroke="{x:Null}" Fill="{TemplateBinding Background}"
                                           HorizontalAlignment="Right"
                                           Margin="0,5,0,5"
                                           Width="5"/>

                                <Rectangle x:Name="bottomLeft"
                                           Stroke="{x:Null}" Fill="Transparent"
                                           HorizontalAlignment="Left" VerticalAlignment="Bottom"
                                           Width="5" Height="5"/>

                                <Rectangle x:Name="bottomRight"
                                           Stroke="{x:Null}" Fill="Transparent"
                                           HorizontalAlignment="Right" VerticalAlignment="Bottom"
                                           Height="5" Width="5"/>

                                <Rectangle x:Name="topRight"
                                           Stroke="{x:Null}" Fill="Transparent"
                                           HorizontalAlignment="Right" VerticalAlignment="Top"
                                           Width="5" Height="5"/>

                                <Rectangle x:Name="topLeft"
                                           Stroke="{x:Null}" Fill="Transparent"
                                           HorizontalAlignment="Left" VerticalAlignment="Top"
                                           Width="6" Height="5" />
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Image Button Style -->
    <Style TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal" SnapsToDevicePixels="True"  HorizontalAlignment="Center" VerticalAlignment="Center">

                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                   Margin="2,0,2,0" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                     Stretch="Uniform" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto"/>
                            </Viewbox>

                            <TextBlock x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" TextWrapping="NoWrap" Effect="{TemplateBinding Effect}"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFABABAB"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
                <Setter Property="BorderBrush" Value="#FF2A8DD4" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="#FFB1B1B1" />-->
                <Setter Property="Background" Value="#FFFDFDFD" />
                <!--<Setter Property="BorderBrush" Value="#FFE1E1E1" />-->
                <Setter Property="Opacity" Value=".6"/>
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Numeric Up Down-->
    <Style TargetType="{x:Type local:NumericUpDown}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NumericUpDown}">

                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <!-- Two grids, the first one can't have 2 rows -->
                        <Grid FlowDirection="LeftToRight">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="55*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="45*" MinWidth="20" MaxWidth="25"/>
                            </Grid.ColumnDefinitions>

                            <TextBox Grid.Row="0" Grid.Column="0" Name="InternalBox" BorderThickness="0" Margin="0,0,1,0" 
                                     VerticalAlignment="Stretch" HorizontalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                     VerticalContentAlignment="Center" AllowDrop="False" SnapsToDevicePixels="True" MaxLines="6" />

                            <Border Grid.Column="1" x:Name="MiddleBorder"  BorderThickness="1,0,0,0"/>

                            <Grid Grid.Column="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="50*"/>
                                    <RowDefinition Height="50*"/>
                                </Grid.RowDefinitions>

                                <RepeatButton Grid.Row="0" Name="UpButton" Content="▲"
                                              Style="{StaticResource OfficeRepeatButtonStyle}" FontSize="8" VerticalContentAlignment="Center" 
                                              BorderThickness="0,0,0,1" Padding="0" Margin="0"/>
                                <RepeatButton Grid.Row="1" Name="DownButton" Content="▼" 
                                              Style="{StaticResource OfficeRepeatButtonStyle}" FontSize="8" VerticalContentAlignment="Center" 
                                              BorderThickness="0,1,0,0" Padding="0" Margin="0"/>

                                <Separator Grid.Row="0" Grid.RowSpan="2" Name="Separator" Visibility="Collapsed" Height="1"/>
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="#FFA3BDE3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="InternalBox" Value="#FFE6E6E6"/>
                            <Setter Property="Visibility" TargetName="UpButton" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="DownButton" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="Separator" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="#FFABABAB"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#FFA3BDE3"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--Double Numeric Up Down-->
    <Style TargetType="{x:Type local:DoubleNumericUpDown}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DoubleNumericUpDown}">

                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <!-- Two grids, the first one can't have 2 rows -->
                        <Grid FlowDirection="LeftToRight">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="55*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="45*" MinWidth="20" MaxWidth="25"/>
                            </Grid.ColumnDefinitions>

                            <TextBox Grid.Row="0" Grid.Column="0" Name="InternalBox" BorderThickness="0" Margin="0,0,1,0" 
                                     VerticalAlignment="Stretch" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" 
                                     VerticalContentAlignment="Center" AllowDrop="False" SnapsToDevicePixels="True" />

                            <Border Grid.Column="1" x:Name="MiddleBorder"  BorderThickness="1,0,0,0"/>

                            <Grid Grid.Column="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="50*"/>
                                    <RowDefinition Height="50*"/>
                                </Grid.RowDefinitions>

                                <RepeatButton Grid.Row="0" Name="UpButton" Content="▲"
                                              Style="{StaticResource OfficeRepeatButtonStyle}" FontSize="8" VerticalContentAlignment="Center" 
                                              BorderThickness="0,0,0,1" Padding="0" Margin="0"/>
                                <RepeatButton Grid.Row="1" Name="DownButton" Content="▼" 
                                              Style="{StaticResource OfficeRepeatButtonStyle}" FontSize="8" VerticalContentAlignment="Center" 
                                              BorderThickness="0,1,0,0" Padding="0" Margin="0"/>

                                <Separator Grid.Row="0" Grid.RowSpan="2" Name="Separator" Visibility="Collapsed" Height="1"/>
                            </Grid>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="MiddleBorder" Value="#FFA3BDE3"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="InternalBox" Value="#FFE6E6E6"/>
                            <Setter Property="Visibility" TargetName="UpButton" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="DownButton" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="Separator" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="BorderBrush" Value="#FFABABAB"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#FFA3BDE3"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--Radio as Toggle Button-->
    <Style BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="{x:Type local:ImageRadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageRadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <Grid MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                     Margin="2,0,2,0" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                     Stretch="Uniform" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto"/>
                            </Viewbox>

                            <TextBlock Grid.Column="1" MaxWidth="{Binding Path=ActualWidth,RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text, Converter={StaticResource MultiLineTitleConverter}}" 
                                       TextWrapping="NoWrap" Padding="0,0,5,0" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>

        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#FFA3BDE3"/>
                    <Setter Property="Background" Value="#FFD5E1F2" />
                </MultiTrigger.Setters>
            </MultiTrigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#FFC2D5F2" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Headered Tooltip-->
    <Style TargetType="{x:Type local:HeaderedTooltip}" BasedOn="{StaticResource {x:Type ToolTip}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HeaderedTooltip}">
                    <Grid>
                        <Rectangle StrokeThickness="2" Margin="20,0,0,0" HorizontalAlignment="Left">
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#00BEBEBE" Offset="0"/>
                                    <GradientStop Color="#00BEBEBE" Offset="1"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>

                        <Rectangle StrokeThickness="2" Margin="0,0,20,0" HorizontalAlignment="Right" >
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#00BEBEBE" Offset="0"/>
                                    <GradientStop Color="#00BEBEBE" Offset="1"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>

                        <Border BorderBrush="#FFBEBEBE" BorderThickness="1" Effect="{DynamicResource Shadow.Border.Large}" Margin="5,5,5,5">
                            <StackPanel>
                                <Label Content="{TemplateBinding Header}" FontWeight="Bold" Background="White" Foreground="#FF5D5D5D" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center"/>
                                <TextBlock Text="{TemplateBinding Text}" Background="White" Foreground="#FF5D5D5D" Padding="5" TextWrapping="WrapWithOverflow" Width="200" TextAlignment="Center"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Hideable TabControl Style-->
    <Style TargetType="{x:Type local:HideableTabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HideableTabControl}">
                    <Grid Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TabPanel Name="TabPanel" Panel.ZIndex="1" Margin="5,0,0,-1" IsItemsHost="True" Background="Transparent"/>

                        <Grid Grid.Row="0" Grid.Column="1" x:Name="BackgroundGrid" Visibility="Collapsed" Margin="0,0,5,1"
                              VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Grid.Background>
                                <RadialGradientBrush>
                                    <GradientStop Color="#A0FFFFFF" Offset="0"/>
                                    <GradientStop Offset="1"/>
                                </RadialGradientBrush>
                            </Grid.Background>
                        </Grid>

                        <local:ImageButton Grid.Row="0" Grid.Column="1" x:Name="HideGridButton" Content="{DynamicResource Glyph.Up}" 
                                           HorizontalContentAlignment="Center" VerticalContentAlignment="Center" 
                                           HorizontalAlignment="Center" VerticalAlignment="Stretch" MaxSize="14" MinWidth="30"
                                           Margin="0,0,5,1" Padding="2" Style="{DynamicResource Style.Button.NoText}"/>

                        <Border Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" x:Name="ContentBorder" BorderBrush="#FFD4D4D4" BorderThickness="0,1" Background="#FFFAFAFA">
                            <ContentPresenter ContentSource="SelectedContent" Effect="{DynamicResource Shadow.Invariant}"/>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Source={x:Static prop:Settings.Default}, Path=EditorExtendChrome, FallbackValue=False}" Value="True">
                            <Setter TargetName="BackgroundGrid" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <!--AwareTabItem Style-->
    <Style TargetType="{x:Type local:AwareTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AwareTabItem}">
                    <Grid Name="Panel" Background="Transparent">
                        <Border Name="ContentBorder" BorderBrush="#FFD4D4D4" BorderThickness="0">
                            <ContentPresenter x:Name="ContentSite"
                                              VerticalAlignment="Center" Effect="{x:Null}"
                                              HorizontalAlignment="Center"
                                              ContentSource="Header" Margin="10,2"/>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Panel">
                            <Setter Property="Foreground" Value="#FF2B579A" />
                            <Setter Property="Background" Value="#FFFAFAFA" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="#FFFAFAFA" />
                            <Setter Property="Foreground" Value="#FF2B579A" />
                            <Setter TargetName="ContentBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>

                        <!--<DataTrigger>
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource AllTrueConverter}">
                                    <Binding Source="{x:Static prop:Settings.Default}" Path="EditorExtendChrome" FallbackValue="False"/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="IsDark"/>
                                </MultiBinding>
                            </DataTrigger.Binding>

                            <Setter Property="FontSize" Value="16" />
                            <Setter Property="Foreground" Value="#FFF8F8FF"/>

                            <Setter TargetName="ContentBorder" Property="Background">
                                <Setter.Value>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#6E000000" Offset="0"/>
                                        <GradientStop Color="#50000000" Offset="0.4"/>
                                        <GradientStop Offset="1"/>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>-->

                        <!--When ExtendChrome, !IsDark, !IsSelected-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static prop:Settings.Default}, Path=EditorExtendChrome, FallbackValue=False}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False"/>
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="#FF000000"/>

                            <Setter TargetName="ContentBorder" Property="Background">
                                <Setter.Value>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#9AFFFFFF" Offset="0"/>
                                        <GradientStop Color="#90FFFFFF" Offset="0.4"/>
                                        <GradientStop Offset="1"/>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!--When ExtendChrome, !IsDark, IsMouseOver-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static prop:Settings.Default}, Path=EditorExtendChrome, FallbackValue=False}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="#FF2B579A"/>
                        </MultiDataTrigger>

                        <!--When ExtendChrome, !IsDark, IsSelected-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static prop:Settings.Default}, Path=EditorExtendChrome, FallbackValue=False}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="Panel" Property="Background" Value="#FFFAFAFA" />
                            <Setter Property="Foreground" Value="#FF2B579A" />
                            <Setter TargetName="ContentBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>

                        <!--When ExtendChrome, IsDark, !IsSelected-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static prop:Settings.Default}, Path=EditorExtendChrome, FallbackValue=False}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False"/>
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="#FFF8F8FF"/>

                            <Setter TargetName="ContentBorder" Property="Background">
                                <Setter.Value>
                                    <RadialGradientBrush>
                                        <GradientStop Color="{Binding Source={x:Static SystemParameters.WindowGlassColor}, 
                                                      Converter={StaticResource ColorToAlphaConverter}, ConverterParameter=6E}" Offset="0"/>
                                        <GradientStop Color="{Binding Source={x:Static SystemParameters.WindowGlassColor}, 
                                                      Converter={StaticResource ColorToAlphaConverter}, ConverterParameter=50}" Offset="0.4"/>
                                        <GradientStop Offset="1"/>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>

                        <!--When ExtendChrome, IsDark, IsMouseOver-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static prop:Settings.Default}, Path=EditorExtendChrome, FallbackValue=False}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>

                            <Setter Property="Foreground" Value="#FFBFEFFF"/>
                        </MultiDataTrigger>
                        
                        <!--When ExtendChrome, IsDark, IsSelected-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static prop:Settings.Default}, Path=EditorExtendChrome, FallbackValue=False}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDark}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>

                            <Setter TargetName="Panel" Property="Background" Value="#FFFAFAFA" />
                            <Setter Property="Foreground" Value="#FF2B579A" />
                            <Setter TargetName="ContentBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="FontFamily" Value="Segoe UI Semilight"/>
    </Style>

    <!--ListItem Common-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3326A0DA"/>
    <!--7FDADADA-->
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#4C26A0DA"/>
    <!--FFDADADA-->
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>

    <!--Image ListBoxItem (Language List)-->
    <Style TargetType="{x:Type local:ImageListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Left" 
                                   Margin="2,0,2,0" Stretch="UniformToFill" StretchDirection="Both"
                                   MaxWidth="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter Content="{TemplateBinding Image}" Width="Auto" Height="Auto"/>
                            </Viewbox>
                            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="5,0,0,0" VerticalAlignment="Center"/>
                            <Label Grid.Column="2" Content="{TemplateBinding Author}" Foreground="#FF858585" Margin="5,0,0,0" HorizontalAlignment="Left"/>
                            <Viewbox Grid.Column="3" x:Name="SelectionMark" VerticalAlignment="Center" HorizontalAlignment="Center"
                                     Margin="2,0,2,0" Stretch="UniformToFill" StretchDirection="Both"
                                     MaxWidth="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <Path x:Name="optionMark"     Data="F1 M 9.97498,.8 L 4.6983,9.09834  L 1,5.19331 L 1.27664,3.52165 L 4.255,6.08833 L 9.33331,1.288e-005 Z" Fill="#FF858585" Margin="1" Stretch="None" Visibility="{TemplateBinding IsSelected, Converter={StaticResource Bool2VisibilityConverterGeneric}}"/>
                            </Viewbox>
                            <Grid.ToolTip>
                                <ToolTip Content="{TemplateBinding Tag}" />
                            </Grid.ToolTip>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Frame ListViewItem-->
    <Style TargetType="{x:Type local:FrameListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FrameListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" StretchDirection="Both"
                                     MaxWidth="{TemplateBinding MaxSize}" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <Image Source="{TemplateBinding Image, Converter={StaticResource UriToBitmapConverter}, ConverterParameter=100}" 
                                       Width="Auto" Height="Auto" Effect="{DynamicResource Shadow.Black.Large}"/>
                            </Viewbox>
                            <Grid Grid.Row="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>

                                <Label x:Name="NumberLabel" Content="{TemplateBinding FrameNumber}" Foreground="#FF858585" 
                                       HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" 
                                       HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0,-5" />

                                <Label x:Name="DelayLabel" Grid.Column="1" Content="{TemplateBinding Delay, Converter={StaticResource IntToDelayStringConverter}}" Foreground="#FF858585"
                                       HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" 
                                       HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0,-5" FontSize="11" FontWeight="Normal" FontStyle="Italic" />
                            </Grid>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Encoder ListViewItem-->
    <Style TargetType="{x:Type local:EncoderListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="2,1"/>
        <!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:EncoderListViewItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                     Stretch="Uniform" StretchDirection="Both" Margin="2" Visibility="Visible"
                                     MaxWidth="{TemplateBinding MaxSize}" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter Content="{TemplateBinding Image}"/>
                            </Viewbox>

                            <local:ImageButton x:Name="CancelButton" Grid.Column="0" Padding="2" Content="{DynamicResource Vector.Close}" MaxSize="15" 
                                               VerticalAlignment="Stretch" HorizontalContentAlignment="Center" HorizontalAlignment="Center"
                                               Visibility="Hidden" MaxWidth="{Binding Path=Height, RelativeSource={RelativeSource Mode=Self}}" 
                                               Style="{DynamicResource Style.Button.NoText}">
                                <local:ImageButton.ToolTip>
                                    <ToolTip x:Name="CancelToolTip" Content="Cancel" Placement="Left" VerticalOffset="-5"/>
                                </local:ImageButton.ToolTip>
                            </local:ImageButton>

                            <Label x:Name="PorcentageLabel" Grid.Column="1" Content="{TemplateBinding Percentage, Converter={StaticResource DoubleToPercentageConverter}}" 
                                   Foreground="#FF858585" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="Center"
                                   FontFamily="Segoe UI Semilight" BorderThickness="0" MinWidth="45"/>

                            <Label x:Name="FileSizeLabel" Grid.Column="1"  Content="{TemplateBinding SizeInBytes, Converter={StaticResource BytesToSizeConverter}}" Foreground="#FF858585"
                                       HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" Visibility="Collapsed"
                                       HorizontalContentAlignment="Center" VerticalContentAlignment="Center" FontStyle="Italic" BorderThickness="0" MinWidth="45"/>

                            <Grid Grid.Column="2" x:Name="ProcessingGrid">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <Label Content="{TemplateBinding Text}" HorizontalAlignment="Stretch" Padding="0,1,0,0"/>
                                <ProgressBar Grid.Row="1" Value="{TemplateBinding Percentage}" Minimum="0" Maximum="100" Height="4" HorizontalAlignment="Stretch" Orientation="Horizontal" HorizontalContentAlignment="Stretch"/>
                            </Grid>

                            <Grid Grid.Column="2" x:Name="CompletedGrid" Visibility="Collapsed">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Label Content="{TemplateBinding Text}" VerticalAlignment="Center" HorizontalAlignment="Center" Padding="2,0"/>

                                <Label Grid.Column="1" x:Name="LinkLabel" FontSize="14" Cursor="Hand" Padding="3,5" 
                                        VerticalAlignment="Center" VerticalContentAlignment="Center" HorizontalAlignment="Right" HorizontalContentAlignment="Right" >
                                    <Hyperlink>
                                        Open File
                                    </Hyperlink>
                                    <Label.ToolTip>
                                        <ToolTip Content="{TemplateBinding OutputPath}"/>
                                    </Label.ToolTip>
                                </Label>

                            </Grid>

                            <Grid Grid.Column="2" x:Name="ErrorGrid" Visibility="Collapsed">
                                <Label Content="{TemplateBinding Text}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Padding="0,1,0,0"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                            <Setter Property="Visibility" TargetName="CancelButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="ViewBoxInternal" Value="Hidden"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="Status" Value="Canceled">
                            <Setter Property="Visibility" TargetName="CancelButton" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="ViewBoxInternal" Value="Hidden"/>
                            <Setter Property="Content" TargetName="CancelToolTip" Value="Remove"/>
                        </Trigger>
                        <Trigger Property="Status" Value="Completed">
                            <Setter Property="Content" TargetName="CancelToolTip" Value="Remove"/>
                            <Setter Property="Visibility" TargetName="ProcessingGrid" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="CompletedGrid" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="FileSizeLabel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="PorcentageLabel" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Status" Value="FileDeletedOrMoved">
                            <Setter Property="Content" TargetName="CancelToolTip" Value="Remove"/>
                            <Setter Property="Visibility" TargetName="PorcentageLabel" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="ProcessingGrid" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="ErrorGrid" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Status" Value="Error">
                            <Setter Property="Content" TargetName="CancelToolTip" Value="Remove"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Spectrum Slider Styles -->
    <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Slider Thumb-->
    <Style x:Key="{x:Type local:ColorThumb}" TargetType="{x:Type local:ColorThumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Viewbox>
                        <Grid Background="Transparent" Cursor="Hand">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="4*" />
                                <ColumnDefinition Width="6*" MinWidth="10"/>
                                <ColumnDefinition Width="4*"/>
                            </Grid.ColumnDefinitions>

                            <Polygon Grid.Column="0" Fill="Black" Points="0.5,0  5.5,4.5  0.5,9" Effect="{DynamicResource Shadow.Black.Large}"/>
                            <Polygon Grid.Column="2" Fill="Black" Points="5.5,0  0.5,4.5  5.5,9" Effect="{DynamicResource Shadow.Black.Large}"/>
                        </Grid>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:SpectrumSlider}" TargetType="{x:Type local:SpectrumSlider}">
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Minimum" Value="0"/>
        <Setter Property="Maximum" Value="100"/>
        <Setter Property="TickFrequency" Value="0.001" />
        <Setter Property="IsSnapToTickEnabled" Value="True" />
        <Setter Property="IsDirectionReversed" Value="False" />
        <Setter Property="Value" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SpectrumSlider}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Height="{TemplateBinding Height}">
                        <Grid MinWidth="{TemplateBinding Slider.MinWidth}" ClipToBounds="False" Effect="{DynamicResource Shadow.Black.Large}">

                            <!--Spectrum-->
                            <Border x:Name="TrackBackground" Width="Auto">
                                <Rectangle x:Name="PART_SpectrumDisplay" Stretch="Fill" VerticalAlignment="Stretch" />
                            </Border>

                            <!--Selecition Range-->
                            <Canvas HorizontalAlignment="Center" Width="4">
                                <Rectangle x:Name="PART_SelectionRange" Canvas.Left="1" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Width="2.0" Visibility="Hidden" />
                            </Canvas>

                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="DecreaseRepeatButton" Style="{StaticResource SliderRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="IncreaseRepeatButton" Style="{StaticResource SliderRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <local:ColorThumb x:Name="Thumb" Height="Auto" ThumbColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" Margin="-1,-10"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Display SelectionRange background -->
                        <Trigger Property="IsSelectionRangeEnabled" Value="True">
                            <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Width" Value="Auto">
                            <Setter Property="MinWidth" Value="21"/>
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="104"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!-- End Spectrum Slider -->

    <!-- Image Menu Item-->
    <Style TargetType="{x:Type local:ImageMenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Foreground" Value="#FF5E5E5E"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageMenuItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_38">
                        <Grid x:Name="Grid" Uid="Grid_49">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="FirstColumn" MinWidth="30" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                <ColumnDefinition Width="10"/>
                            </Grid.ColumnDefinitions>

                            <Grid x:Name="CheckSquare" Grid.Column="0" Background="Transparent" Margin="0,0,3,0">
                                <Viewbox x:Name="CheckViewBox" Visibility="Collapsed" MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}" Stretch="Uniform">
                                    <Path x:Name="GlyphPanel" Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" Uid="Path_12" Visibility="Hidden" VerticalAlignment="Center"/>
                                </Viewbox>
                                <Viewbox x:Name="ImageViewBox" Visibility="Visible"  VerticalAlignment="Center" MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}" Stretch="Uniform">
                                    <ContentPresenter Content="{TemplateBinding Image}" VerticalAlignment="Center"/>
                                </Viewbox>
                            </Grid>

                            <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_33"/>
                            <TextBlock x:Name="InputGestureText" Grid.Column="2" DockPanel.Dock="Right" Margin="5,2,0,2" Text="{TemplateBinding InputGestureText}" Uid="TextBlock_10" Foreground="#FF5C5D5C" FontSize="12" FontWeight="Bold"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Background" TargetName="CheckSquare" Value="#FFD5E1F2"/>
                        </Trigger>
                        <Trigger Property="HasImage" Value="True">
                            <Setter Property="Visibility" TargetName="ImageViewBox" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="HasImage" Value="False">
                            <Setter Property="Visibility" TargetName="CheckViewBox" Value="Visible"/>
                        </Trigger>

                        <!--<Trigger Property="Image" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ImageViewBox" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="CheckViewBox" Value="Visible"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0,1"/>
                <Setter Property="Padding" Value="6,3"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:ImageMenuItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_39">
                                <DockPanel x:Name="DockPanel" Uid="DockPanel_4">
                                    <Path x:Name="GlyphPanel" Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" Uid="Path_13" Visibility="Collapsed" VerticalAlignment="Center"/>
                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_35"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0,1"/>
                <Setter Property="Padding" Value="6,3"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:ImageMenuItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_41">
                                <DockPanel x:Name="DockPanel" Uid="DockPanel_5">
                                    <Path x:Name="GlyphPanel" Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" Uid="Path_14" Visibility="Collapsed" VerticalAlignment="Center"/>
                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_37"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:ImageMenuItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_42">
                                <Grid x:Name="Grid" Uid="Grid_50">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="17" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition MinWidth="5" SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                                        <ColumnDefinition Width="14"/>
                                    </Grid.ColumnDefinitions>

                                    <Grid x:Name="CheckSquare" Grid.Column="0" Background="Transparent" Margin="0,0,3,0">
                                        <Viewbox x:Name="CheckViewBox" Visibility="Collapsed" MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}" Stretch="Uniform">
                                            <Path x:Name="GlyphPanel" Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="4,0,6,0" Uid="Path_12" Visibility="Hidden" VerticalAlignment="Center"/>
                                        </Viewbox>
                                        <Viewbox x:Name="ImageViewBox" Visibility="Visible"  VerticalAlignment="Center" MaxHeight="{TemplateBinding MaxSize}" MaxWidth="{TemplateBinding MaxSize}" Stretch="Uniform">
                                            <ContentPresenter Content="{TemplateBinding Image}" VerticalAlignment="Center"/>
                                        </Viewbox>
                                    </Grid>

                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_39"/>
                                    <TextBlock x:Name="InputGestureText" Grid.Column="2" DockPanel.Dock="Right" Margin="5,2,0,2" Text="{TemplateBinding InputGestureText}" Uid="TextBlock_10" Foreground="#FF5C5D5C" FontSize="12" FontWeight="Bold"/>
                                    <Path x:Name="Path" Grid.Column="3" DockPanel.Dock="Right" Data="M0,0L4,3.5 0,7z" Fill="{TemplateBinding Foreground}" Margin="4,0,6,0" Uid="Path_16" VerticalAlignment="Center"/>

                                    <Popup Name="Popup" Grid.Column="3" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade" VerticalOffset="-2">
                                        <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="White" BorderBrush="#FFBEBEBE" BorderThickness="1" Effect="{DynamicResource Shadow.Border.Small}" Margin="2">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                                    <Setter Property="Background" TargetName="CheckSquare" Value="#FFD5E1F2"/>
                                </Trigger>
                                <Trigger Property="HasImage" Value="True">
                                    <Setter Property="Visibility" TargetName="ImageViewBox" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="HasImage" Value="False">
                                    <Setter Property="Visibility" TargetName="CheckViewBox" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top"/>
                <Setter Property="Padding" Value="0,2"/>
            </Trigger>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Background" Value="#FFD5E1F2"/>
                <!--<Setter Property="BorderBrush" Value="#FFA3BDE3"/>-->
                <Setter Property="BorderBrush" Value="#FFD5E1F2"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Foreground" Value="{DynamicResource ListItemDisabledForegroundBrush}"/>-->
                <Setter Property="Opacity" Value=".65"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--ZoomControl-->
    <Style TargetType="{x:Type local:ZoomBox}">
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ZoomBox}">
                    <ScrollViewer x:Name="ScrollViewer" ClipToBounds="True" Background="Transparent" SnapsToDevicePixels="True" UseLayoutRounding="True"
                                  VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" >
                        <Grid x:Name="Grid" RenderTransformOrigin="0.5,0.5" Background="Transparent" 
                              HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" UseLayoutRounding="True">
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="ScaleTransform"/>
                                </TransformGroup>
                            </Grid.LayoutTransform>
                            <Viewbox Grid.Column="0" Grid.Row="0" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                <Image x:Name="ImageControl" Source="{TemplateBinding ImageSource, Converter={StaticResource UriToBitmapConverter}}" 
                                       SnapsToDevicePixels="True" UseLayoutRounding="True"/>
                            </Viewbox>
                        </Grid>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ImageScrollViewer}">
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" 
                                            CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" 
                                            Margin="{TemplateBinding Padding}" Grid.Row="0" RenderTransformOrigin="0.5,0.5">
                            <ScrollContentPresenter.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform x:Name="ScaleTransform"/>
                                </TransformGroup>
                            </ScrollContentPresenter.RenderTransform>
                        </ScrollContentPresenter>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" 
                               Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                               Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" 
                               Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                               Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Circular ProgressBar Style-->
    <Style TargetType="{x:Type local:CircularProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CircularProgressBar}">
                    <Path x:Name="PathRoot" Stroke="{TemplateBinding SegmentColor}" StrokeThickness="{TemplateBinding StrokeThickness}" 
                          HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Path.Data>
                            <PathGeometry>
                                <PathGeometry.Figures>
                                    <PathFigureCollection>
                                        <PathFigure x:Name="PathFigure">
                                            <PathFigure.Segments>
                                                <PathSegmentCollection>
                                                    <ArcSegment x:Name="ArcSegment" SweepDirection="Clockwise" />
                                                </PathSegmentCollection>
                                            </PathFigure.Segments>
                                        </PathFigure>
                                    </PathFigureCollection>
                                </PathGeometry.Figures>
                            </PathGeometry>
                        </Path.Data>
                    </Path>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <!--<Setter Property="BorderBrush" Value="#FFABABAB"/>-->
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".6"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
