<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ScreenToGif.Controls">

    <!--Converter-->
    <BooleanToVisibilityConverter x:Key="Bool2VisibilityConverterGeneric" />

    <!--  Window Button Style -->
    <Style TargetType="{x:Type Button}" x:Key="WindowButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Chrome"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" Effect="{DynamicResource ShadowEffect}">
                        <ContentPresenter
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Margin" Value="0,0,5,0"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="MediumSlateBlue" />
                <Setter Property="Background" Value="White" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Background" Value="CornflowerBlue" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="DarkGray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  Office RepeatButton Style -->
    <Style TargetType="{x:Type RepeatButton}" x:Key="OfficeRepeatButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Chrome"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="0"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FF777777" />
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="6"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
                <Setter Property="Foreground" Value="#FF444444" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window Style -->
    <Style TargetType="{x:Type local:LightWindow}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="DeepSkyBlue"/>
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="MinWidth" Value="180"/>
        <Setter Property="Title" Value="Screen To Gif" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LightWindow}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid>
                                <!--Background="{TemplateBinding Background}"-->
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Grid x:Name="moveRectangle" Background="{TemplateBinding Background}" Grid.Row="0" Grid.Column="0" Height="30" SnapsToDevicePixels="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <!--<Image Grid.Column="0" Source="../Resources/Icons/Logo24x.png" Margin="5,5,0,0"/>-->
                                    <Viewbox Grid.Column="0" Margin="5,5,0,0" Stretch="Uniform" Width="{TemplateBinding MaxSize}"  SnapsToDevicePixels="True" UseLayoutRounding="True" >
                                        <ContentControl Content="{TemplateBinding Child}" Width="Auto" Height="Auto"/>
                                    </Viewbox>
                                    <TextBlock Grid.Column="1" x:Name="CaptionText" Text="{TemplateBinding Title}" FontFamily="Segoe UI" FontSize="16" FontWeight="Regular" Margin="5,5,0,0" Foreground="#FF6F5252" Effect="{DynamicResource ShadowEffectDynamic}"/>
                                </Grid>

                                <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" Background="{TemplateBinding Background}" Margin="0,0,2,0">
                                    <Button x:Name="BackButton" Style="{StaticResource WindowButtonStyle}" Content="3" Width="30"/>
                                    <Button x:Name="minimizeButton" Style="{StaticResource WindowButtonStyle}" Content="0" Width="30"/>
                                    <Button x:Name="restoreButton" Style="{StaticResource WindowButtonStyle}" Content="1" Width="30"/>
                                    <Button x:Name="closeButton" Style="{StaticResource WindowButtonStyle}" Content="r" Width="30"/>
                                </StackPanel>

                                <Grid Grid.Row="1" Grid.ColumnSpan="2" Grid.Column="0" Margin="5,5,5,0" Background="{x:Null}">
                                    <AdornerDecorator>
                                        <ContentPresenter/>
                                    </AdornerDecorator>
                                </Grid>
                            </Grid>

                            <Grid x:Name="resizeGrid">
                                <Rectangle
                                    x:Name="top"
                                    Stroke="{x:Null}"
                                    Fill="Transparent"
                                    VerticalAlignment="Top"
                                    Height="5"
                                    Margin="5,0,5,0" />

                                <Rectangle
                                    x:Name="bottom"
                                    Stroke="{x:Null}"
                                    Fill="Transparent"
                                    Height="5"
                                    VerticalAlignment="Bottom"
                                    Margin="5,0,5,0" />

                                <Rectangle
                                    x:Name="left"                                    
                                    Stroke="{x:Null}"
                                    Fill="{TemplateBinding Background}"
                                    HorizontalAlignment="Left"
                                    Margin="0,5,0,5"
                                    Width="5"/>

                                <Rectangle
                                    x:Name="right"
                                    Stroke="{x:Null}"
                                    Fill="{TemplateBinding Background}"
                                    Margin="0,5,0,5"
                                    Width="5"
                                    HorizontalAlignment="Right" />

                                <Rectangle
                                    x:Name="bottomLeft"
                                    Stroke="{x:Null}"
                                    Fill="{TemplateBinding Background}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Bottom"
                                    Width="5"
                                    Height="5" />

                                <Rectangle
                                    x:Name="bottomRight"
                                    Stroke="{x:Null}"
                                    Fill="{TemplateBinding Background}"
                                    VerticalAlignment="Bottom"
                                    Height="5"
                                    Width="5"
                                    HorizontalAlignment="Right" />

                                <Rectangle
                                    x:Name="topRight"
                                    Stroke="{x:Null}"
                                    Fill="{TemplateBinding Background}"
                                    HorizontalAlignment="Right"
                                    Width="5"
                                    Height="5"
                                    VerticalAlignment="Top" />

                                <Rectangle
                                    x:Name="topLeft"
                                    Stroke="{x:Null}"
                                    Fill="Transparent"
                                    HorizontalAlignment="Left"
                                    Width="6"
                                    VerticalAlignment="Top"
                                    Height="5" />
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Numeric Up Down-->
    <Style TargetType="{x:Type local:NumericUpDown}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NumericUpDown}">

                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <!-- Two grids, the first one can't have 2 rows -->
                        <Grid FlowDirection="LeftToRight">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="60*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="40*"/>
                            </Grid.ColumnDefinitions>

                            <Grid Grid.Column="0">
                                <TextBox Grid.Row="0" Grid.Column="0" Name="InternalBox" BorderThickness="0"
                                     VerticalAlignment="Stretch" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,1,0" AllowDrop="False" SnapsToDevicePixels="True" />
                            </Grid>

                            <Border Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,0,0"/>

                            <Grid Grid.Column="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="50*"/>
                                    <RowDefinition Height="50*"/>
                                </Grid.RowDefinitions>

                                <RepeatButton Content="▲" Grid.Row="0" Name="Part_UpButton"   Style="{StaticResource OfficeRepeatButtonStyle}" FontSize="8" VerticalContentAlignment="Top"  BorderThickness="0,0,0,1" Padding="0" Margin="0" Width="Auto"/>
                                <RepeatButton Content="▼" Grid.Row="1" Name="Part_DownButton" Style="{StaticResource OfficeRepeatButtonStyle}" FontSize="8" VerticalContentAlignment="Top"  BorderThickness="0,1,0,0" Padding="0" Margin="0" />
                                <!--1,0,1,1 - 0,-1,0,0-->
                            </Grid>
                        </Grid>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="BorderBrush" Value="#FFABABAB"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#FFA3BDE3"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--Office Button Style -->
    <Style TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal" SnapsToDevicePixels="True"  HorizontalAlignment="Center" VerticalAlignment="Center">

                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                   Margin="2,0,2,0" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                     Stretch="UniformToFill" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto"/>
                            </Viewbox>

                            <TextBlock x:Name="TextBlockInternal" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" TextWrapping="Wrap" Effect="{TemplateBinding Effect}"/>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFABABAB"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
                <Setter Property="BorderBrush" Value="#FFA3BDE3" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
                <Setter Property="BorderBrush" Value="#FF2A8DD4" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#FFB1B1B1" />
                <Setter Property="Background" Value="#FFFDFDFD" />
                <Setter Property="BorderBrush" Value="#FFE1E1E1" />
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Radio as Toggle Button-->
    <Style BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="{x:Type local:ImageRadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageRadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <Grid MinHeight="{TemplateBinding MinHeight}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                   Margin="2,0,2,0" Width="{TemplateBinding MaxSize}" Height="{TemplateBinding MaxSize}" 
                                     Stretch="UniformToFill" StretchDirection="Both" MaxHeight="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter ContentSource="{TemplateBinding Content}" Width="Auto" Height="Auto"/>
                            </Viewbox>
                            <TextBlock Grid.Column="1" MaxWidth="{Binding Path=ActualWidth,RelativeSource={RelativeSource TemplatedParent}}" 
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Text}" TextWrapping="WrapWithOverflow" Padding="0,0,5,0" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Default Values-->
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>

        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#FFA3BDE3"/>
                    <Setter Property="Background" Value="#FFD5E1F2" />
                </MultiTrigger.Setters>
            </MultiTrigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#FFC2D5F2" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD5E1F2" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FFA3BDE3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Headered Tooltip-->
    <Style TargetType="{x:Type local:HeaderedTooltip}" BasedOn="{StaticResource {x:Type ToolTip}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HeaderedTooltip}">
                    <Grid>
                        <Rectangle StrokeThickness="2" Margin="20,0,0,0" HorizontalAlignment="Left">
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#00BEBEBE" Offset="0"/>
                                    <GradientStop Color="#00BEBEBE" Offset="1"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>

                        <Rectangle StrokeThickness="2" Margin="0,0,20,0" HorizontalAlignment="Right" >
                            <Rectangle.Stroke>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#00BEBEBE" Offset="0"/>
                                    <GradientStop Color="#00BEBEBE" Offset="1"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.2"/>
                                    <GradientStop Color="#FFB1B1B1" Offset="0.8"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>

                        <Border BorderBrush="#FFBEBEBE" BorderThickness="1" Effect="{DynamicResource ShadowDynamicLargeBorder}" Margin="5,5,5,5">
                            <StackPanel>
                                <Label Content="{TemplateBinding Header}" FontWeight="Bold" Background="White" Foreground="#FF5D5D5D" HorizontalAlignment="Stretch" HorizontalContentAlignment="Center" />
                                <TextBlock Text="{TemplateBinding Text}" Background="White" Foreground="#FF5D5D5D" Padding="5" TextWrapping="WrapWithOverflow" Width="200" />
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Hideable TabControl Style-->
    <Style TargetType="{x:Type local:HideableTabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:HideableTabControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TabPanel Name="TabPanel"  Grid.Row="0" Panel.ZIndex="1" Margin="5,0,0,-1" IsItemsHost="True" Background="Transparent"/>

                        <Border Name="ContentBorder" Grid.Row="1" BorderBrush="#FFD4D4D4" BorderThickness="0,1">
                            <ContentPresenter ContentSource="SelectedContent" Effect="{x:Null}"/>
                        </Border>

                        <local:ImageButton Name="HideGrid" HorizontalContentAlignment="Center" Content="{DynamicResource GlyphUp}" Margin="0,0,0,1" Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Style="{DynamicResource ClearButtonStyle}" Text="" MaxSize="10" MinWidth="20" Padding="10,0,0,0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Image ListBoxItem-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>

    <Style TargetType="{x:Type local:ImageListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Viewbox x:Name="ViewBoxInternal" VerticalAlignment="Center" HorizontalAlignment="Left" 
                                   Margin="2,0,2,0" Stretch="UniformToFill" StretchDirection="Both"
                                   MaxWidth="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <ContentPresenter Content="{TemplateBinding Image}" Width="Auto" Height="Auto"/>
                            </Viewbox>
                            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="5,0,0,0" VerticalAlignment="Center"/>
                            <Label Grid.Column="2" Content="{TemplateBinding Author}" Foreground="#FF858585" Margin="5,0,0,0" HorizontalAlignment="Left"/>
                            <Viewbox Grid.Column="3" x:Name="SelectionMark" VerticalAlignment="Center" HorizontalAlignment="Center"
                                     Margin="2,0,2,0" Stretch="UniformToFill" StretchDirection="Both"
                                     MaxWidth="{TemplateBinding MaxSize}" Effect="{x:Null}">
                                <Path x:Name="optionMark"     Data="F1 M 9.97498,.8 L 4.6983,9.09834  L 1,5.19331 L 1.27664,3.52165 L 4.255,6.08833 L 9.33331,1.288e-005 Z" Fill="#FF858585" Margin="1" Stretch="None" Visibility="{TemplateBinding IsSelected, Converter={StaticResource Bool2VisibilityConverterGeneric}}"/>
                            </Viewbox>
                            <Grid.ToolTip>
                                <ToolTip Content="{TemplateBinding Tag}" />
                            </Grid.ToolTip>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
